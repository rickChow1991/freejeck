// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using UnityEngine.UI;
using System.Collections;
using System.Collections.Generic;

namespace com.iuixi.FreeJeck
{
	public enum TableDirection
	{
		Horizontal,
		Vertical,
		Left,
		Right,
		Up,
		Down,
	}
	
	[RequireComponent(typeof(GridLayoutGroup))]
	public class TableGrid<T, B> : MonoBehaviour
		where B: TableCell<T>, new ()
	{
		[SerializeField]protected Image m_Ge;
		[SerializeField]protected Image m_Shi;
		[SerializeField]protected Image m_Bai;
		
		public Button next;
		public Button prev;
		public TableDirection direction;
		public GameObject FirstCell;
		public float Padding { private get; set; }
		public int maxCells;
		protected  int start;
		protected List<T> dataProvider;
		
		protected List<B> cells;
		
		private int maxPages;
		private int currentPage;
		private int Page;//当前的页数
		
		//计算个位十位百位的页数
		private void CurrentPage()
		{
			m_Ge.sprite=Instantiate(Resources.Load<Image>("cnt/"+Page%10).sprite)as Sprite ;
			m_Shi.sprite=Instantiate(Resources.Load<Image>("cnt/"+Page/10%10).sprite)as Sprite ;
			m_Bai.sprite=Instantiate(Resources.Load<Image>("cnt/"+Page/100%10).sprite)as Sprite ;
		}
		
		public void NextPage ()
		{
			if(currentPage < maxPages - 1)
				currentPage++;
			Page=currentPage+1;
			if(m_Ge!=null&&m_Shi!=null&&m_Bai!=null)
				CurrentPage();
			RenderCells();
		}
		
		public void PrePage ()
		{
			if(currentPage > 0)
				currentPage--;
			Page=currentPage+1;
			if(m_Ge!=null&&m_Shi!=null&&m_Bai!=null)
				CurrentPage();
			RenderCells();
		}
		
		public void SetDataProvider(List<T> dp)
		{
			
			this.dataProvider = dp;
			if(dp.Count < maxCells )
			{
				next.enabled = false;
				prev.enabled = false;
				maxPages = 1;
				currentPage = 0;
			}
			else
			{
				maxPages = dp.Count / (maxCells)+1;//加上最后一页
				currentPage = 0;
				next.enabled = true;
			}
			RenderCells();
		}
		
		private void RenderCells()
		{
			//Debug.Log(dataProvider.Count);
			start = currentPage * maxCells;
			int max = Math.Min(maxCells, dataProvider.Count - start);
			if(cells.Count > max)
			{
				int i = 0;
				for (; i < max; i++) 
				{
					cells[i].gameObject.SetActive(true);
					cells[i].Render(dataProvider[start + i]);
				}
				for(; i < cells.Count; i++)
				{
					cells[i].gameObject.SetActive(false);
				}
			}
			else
			{
				for(int i = 0; i < max; i++)
				{
					cells[i].gameObject.SetActive(true);
					cells[i].Render(dataProvider[start + i]);
				}
			}
			//	SortCells();
			prev.interactable = currentPage > 0;
			next.interactable = currentPage < maxPages - 1;
		}
		
		protected void InitCells ()
		{
			if(FirstCell == null)
			{
				throw new Exception("FirstCell is not assigned");
			}
			cells = new List<B> ();
			cells.Add(GetCellController(FirstCell));
			GameObject obj;
			for (int i = 1; i  < maxCells; i++) {
				obj = Instantiate<GameObject>(FirstCell);
				obj.transform.SetParent(FirstCell.transform.parent);
				obj.transform.position = FirstCell.transform.position;
				obj.transform.rotation = FirstCell.transform.rotation;
				obj.transform.localScale = FirstCell.transform.localScale;
				obj.transform.FindChild("0").name=i.ToString ();//设置面板索引的名称,以备后面用
				cells.Add(GetCellController(obj));
			}
			
			next.interactable = false;
			prev.interactable = false;
			//SortCells();
		}
		
		private void SortCells()
		{
			//			int count = 0;
			//			int row = 0;
			//			int col;
			//			foreach (var item in cells) {
			//				row = count / cols;
			//				col = count % cols;
			//				SetPos(item, row, col);
			//				count++;
			//			}
		}
		
		private void SetPos(B t, int row, int col)
		{
			t.transform.localPosition = new Vector3((t.GetWidth() + Padding) * col + Padding,
			                                        -(t.GetHeight() + Padding) * row - Padding,
			                                        t.transform.localPosition.z
			                                        );
		}
		
		private B GetCellController(GameObject obj)
		{
			B tmp = obj.GetComponent<B>();
			if(tmp == null)
			{
				throw new Exception("Error");
			}
			tmp.transform.gameObject.SetActive(false);
			return tmp;
		}
	}
}

